# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform

name: 'Terraform'

on:
  push:
    branches: [ "main", "dev" ]
  workflow_dispatch:

permissions:
  contents: read

env:
  # Credentials used by cli to initialize
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }} # Used by awscli
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }} # Used by awscli
  # Credentials used as TF variables
  TF_VAR_AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }} # Used by tfvariables
  TF_VAR_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }} # Used by tfvariables
  AWS_REGION: eu-west-2
  TF_VAR_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Verify terraform version
    - name: Verify Terraform
      run: terraform --version

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init DEV Env
      run: terraform -chdir=environments/dev init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format DEV
      run: terraform -chdir=environments/dev fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan DEV
      run: terraform -chdir=environments/dev plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply DEV
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=environments/dev apply -auto-approve -input=false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init Prod Env
      run: terraform -chdir=environments/prod init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir=environments/prod fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=environments/prod plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform -chdir=environments/prod apply -auto-approve -input=false
